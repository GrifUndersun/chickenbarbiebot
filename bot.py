import datetime
import traceback  # –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å –≤
import aioschedule  # –¥–ª—è
import asyncio  # –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
import config as cfg  #
import parse_timetable as pt  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ http://ruz.narfu.ru
import parse_weather as weather  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å —Å–∞–π—Ç–∞ http://openwethermap.org
import os

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤ @BotFather –≤ Telegram –±–æ—Ç—É –ø–æ —Ç–æ–∫–µ–Ω—É
bot = Bot(token = os.environ['BOT_TOKEN'])
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM
storage = MemoryStorage()
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    text = State()
    add_group = State()
    add_city = State()
    city = State()


commands = {
    'group': 'group',
    'city': 'city',
    'me': 'me',
    'help': 'help',
    'start': 'start'
}

users_students = cfg.open_usersDB('database_students.json')
users_weather = weather.openDB()

button_timetable = types.InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïò')
button_mailing = types.InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞ üì™')
button_help = types.InlineKeyboardButton('–ü–æ–º–æ—â—å ü§ñ', callback_data='show_help')
button_weather = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞ ‚òÅ')

keyboard_start = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_start.add(button_timetable)
keyboard_start.add(button_weather)
keyboard_start.add(button_help, button_mailing)


# -------------------- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö --------------------


def get_user_dict(db, target):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–∑ –±–∞–∑–∑—ã –¥–∞–Ω–Ω—ã—Ö
        –£–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–∫—É–¥–∞ –Ω–∞–¥–æ –¥–æ—Å—Ç–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å
        –ò ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ """

    for x in db:
        if x['id'] == int(target):
            return x


# -------------------- –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã --------------------


async def cancel_handler(msg, state):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await msg.reply('–û–ö')


# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ --------------------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def welcome_message(msg: types.Message):
    await bot.send_message(msg.chat.id,
                           f'–ü—Ä–∏–≤–µ—Ç, <b>{msg.from_user.first_name}</b>!\n'
                           f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n'
                           f'‚úÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n\n'
                           f'–ï—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑:\n'
                           f'–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É /{commands["group"]}\n'
                           f'–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ /{commands["city"]}',
                           parse_mode='HTML',
                           reply_markup=keyboard_start)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def show_commands(msg: types.Message):
    await bot.send_message(msg.chat.id,
                           f'–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                           f'‚úÖ /{commands["group"]} - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å\n'
                           f'‚úÖ /{commands["city"]} - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å\n'
                           f'‚úÖ /{commands["me"]} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n'
                           f'‚úÖ /{commands["start"]} - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                           f'‚úÖ /{commands["help"]} - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n'
                           f'–ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–∏—Å–∞—Ç—å @rewxrld')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /me
@dp.message_handler(commands=commands['me'])
async def show_user_info(msg: types.Message):
    student = get_user_dict(users_students, msg.from_user.id)
    user = get_user_dict(users_weather, msg.from_user.id)
    mailing_str = ''
    if student['mailing']:
        mailing_str += f'‚úÖ –í–∫–ª—é—á–µ–Ω–∞ —Ä—ã—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n'
    elif not student['mailing']:
        mailing_str += f'‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n'
    if user['mailing']:
        mailing_str += f'‚úÖ –í–∫–ª—é—á–µ–Ω–∞ —Ä—ã—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã\n'
    elif not user['mailing']:
        mailing_str += f'‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã\n'
    try:
        await msg.reply(f'üë®‚Äçüíª –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{msg.from_user.first_name}</b>\n'
                        f'üè´ –ì—Ä—É–ø–ø–∞: <b>{student["group"]} - '
                        f'{pt.get_groupName(student["group"])}</b>\n\n'
                        f'{mailing_str}',
                        parse_mode='HTML')
    except Exception as e:
        print(e)
        await msg.reply(f'üë®‚Äçüíª –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{msg.from_user.first_name}</b>\n'
                        f'üè´ –ì—Ä—É–ø–ø–∞: <b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É. –î–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –Ω–∞–∂–º–∏—Ç–µ '
                        f'/{commands["group"]}</b>\n',
                        parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /group
@dp.message_handler(commands=commands["group"])
async def add_user(msg: types.Message):
    await Form.add_group.set()
    await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n'
                     '–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /city
@dp.message_handler(commands=commands["city"])
async def add_city(msg: types.Message):
    await Form.add_city.set()
    await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞\n'
                     '–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel')


# -------------------- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ --------------------


def get_keyboard_days_timetable(id):
    try:
        user = get_user_dict(users_students, id)
        timetable = pt.get_timetable(user["group"])
        days, table = pt.print_timetable(timetable)
        keyboard_days = types.InlineKeyboardMarkup(row_width=1)
        for i in range(len(days)):
            keyboard_days.add(types.InlineKeyboardButton(text=days[i], callback_data='num_{}'.format(i)))
        return keyboard_days
    except Exception as e:
        print(traceback.format_exc())
        print('Get keyboard days timetable:', e)


@dp.message_handler(lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïò')
async def show_timetable(msg: types.Message):
    try:
        await msg.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=get_keyboard_days_timetable(msg.chat.id))
    except Exception as e:
        print(traceback.format_exc())
        print('Exception (show timetable): ', e)
        await bot.send_message(msg.chat.id, f'<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É!</b>\n–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É /{commands["group"]}',
                               parse_mode='HTML')


async def update_timetable_text(msg, value):
    try:
        with suppress(MessageNotModified):
            await msg.edit_text(f'{value}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', parse_mode='HTML',
                                reply_markup=get_keyboard_days_timetable(msg.chat.id))
    except Exception as e:
        print(traceback.format_exc())
        print('Update timetable text:', e)


@dp.callback_query_handler(Text(startswith="num_"))
async def callbacks_num(call: types.CallbackQuery):
    try:
        user = get_user_dict(users_students, call.from_user.id)
        timetable = pt.get_timetable(user["group"])
        days, table = pt.print_timetable(timetable)
        action = int(call.data.split('num_')[1])

        result_str = f'{days[action]}\n{table[action]}'
        await update_timetable_text(call.message, result_str)
        # –û—Ç—á–∏—Ç—ã–≤–∞–µ–º—Å—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–±—ç–∫–∞
        await call.answer()
    except Exception as e:
        print('Callbacks num:', e)
        await bot.send_message(call.from_user.id, '<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É!</b>\n–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É /group',
                               parse_mode='HTML')
        await call.answer()


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–ö')


# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=Form.add_group)
async def process_name(msg: types.Message, state: FSMContext):
    global users_students
    if pt.get_siteID(msg.text) is None:
        await bot.send_message(msg.chat.id, f'–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    else:
        users_students = cfg.save_usersDB('database_students.json', int(msg.from_user.id), int(msg.text), 0)
        await state.finish()
        print(users_students)
        await bot.send_message(msg.chat.id, f'–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ {msg.text} - {pt.get_groupName(msg.text)}')


# -------------------- –ü–æ–≥–æ–¥–∞ --------------------


@dp.message_handler(lambda message: message.text == '–ü–æ–≥–æ–¥–∞ ‚òÅ')
async def get_weather(msg: types.Message):
    print(users_weather, '\n', msg.from_user.id)
    try:
        user = get_user_dict(users_weather, msg.from_user.id)
        result = weather.get_weather(user['city'])
        await bot.send_message(msg.chat.id, result)
    except Exception as e:
        print('Get weather:', e)
        await Form.add_city.set()
        await msg.answer('–í—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –≥–æ—Ä–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–ö')


# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –Ω–Ω–∞–≤–∞–∑–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=Form.add_city)
async def add_city(msg: types.Message, state: FSMContext):
    global users_weather
    if weather.get_weather(str(msg.text)) is None:
        await bot.send_message(msg.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    else:
        users_weather = weather.saveDB(int(msg.from_user.id), str(msg.text), False)
        await state.finish()
        print(users_weather)
        await bot.send_message(msg.chat.id, f'–í–∞—à –≥–æ—Ä–æ–¥ - {msg.text.capitalize()}')


# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â—å --------------------


@dp.message_handler(lambda message: message.text == '–ü–æ–º–æ—â—å ü§ñ')
async def ans_button_commands(msg: types.Message):
    await show_commands(msg)


# -------------------- –†–∞—Å—Å—ã–ª–∫–∞ --------------------


def get_keyboard_mailing(mailing_timetable, mailing_weather):
    if mailing_timetable:
        button_1 = types.InlineKeyboardButton('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
                                              callback_data='mailing_off_timetable')
    else:
        button_1 = types.InlineKeyboardButton('‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ —Ä—ã—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
                                              callback_data='mailing_on_timetable')
    if mailing_weather:
        button_2 = types.InlineKeyboardButton('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã',
                                              callback_data='mailing_off_weather')
    else:
        button_2 = types.InlineKeyboardButton('‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ —Ä—ã—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã',
                                              callback_data='mailing_on_weather')
    keyboard = types.InlineKeyboardMarkup().add(button_1)
    keyboard.add(button_2)

    return keyboard


@dp.message_handler(lambda message: message.text == '–†–∞—Å—Å—ã–ª–∫–∞ üì™')
async def ans_button_mailing(msg: types.Message):
    student = get_user_dict(users_students, msg.from_user.id)
    user = get_user_dict(users_weather, msg.from_user.id)
    try:
        MailingTimetable = student['mailing']
        MailingWeather = user['mailing']
        with suppress(MessageNotModified):
            await msg.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', parse_mode='HTML',
                             reply_markup=get_keyboard_mailing(MailingTimetable, MailingWeather))
    except Exception as e:
        print(e)
        if student is None:
            await add_user(msg)
        elif user is None:
            await Form.city.set()
            await msg.answer('–í—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –≥–æ—Ä–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')


async def update_text_mailing(msg: types.Message, valueTimetable, valueWeather):
    with suppress(MessageNotModified):
        await msg.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', parse_mode='HTML',
                            reply_markup=get_keyboard_mailing(valueTimetable, valueWeather))


@dp.callback_query_handler(Text(startswith="mailing_"))
async def callbacks_mail(call: types.CallbackQuery):
    global users_students, users_weather
    student = get_user_dict(users_students, int(call.from_user.id))
    user = get_user_dict(users_weather, int(call.from_user.id))
    action = str(call.data.split('mailing_')[1])
    switch1 = student['mailing']
    switch2 = user['mailing']
    if action == 'on_timetable':
        switch1 = True
        users_students = cfg.save_usersDB('database_students.json', int(call.from_user.id), student['group'], True)
    elif action == 'off_timetable':
        switch1 = False
        users_students = cfg.save_usersDB('database_students.json', str(call.from_user.id), student['group'], False)
    else:
        pass
    if action == 'on_weather':
        switch2 = True
        users_weather = weather.saveDB(int(call.from_user.id), user['city'], True)
    elif action == 'off_weather':
        switch2 = False
        users_weather = weather.saveDB(int(call.from_user.id), user['city'], False)
    await update_text_mailing(call.message, switch1, switch2)
    await call.answer()


@dp.message_handler(content_types=['text'])
async def send_text(msg: types.Message):
    if msg.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïò' or msg.text == '–ü–æ–º–æ—â—å ü§ñ' or msg.text == '–†–∞—Å—Å—ã–ª–∫–∞ üì™' \
            or msg.text == '–ü–æ–≥–æ–¥–∞ ‚òÅ' or msg.text in commands.keys():
        pass
    else:
        await bot.send_message(msg.chat.id, f'‚ùå <b>–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!</b>\n'
                                            f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n/{commands["help"]}',
                               parse_mode='HTML')


@dp.message_handler()
async def mailing_timetable():
    dayNumber = datetime.datetime.today().weekday()
    if dayNumber == 6:
        pass
    else:
        for x in users_students:
            if x['mailing']:
                timetable = pt.get_timetable(x['group'])
                days, table = pt.print_timetable(timetable)
                result_str = f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n{days[dayNumber]}\n{table[dayNumber]}'
                await bot.send_message(x['id'], result_str, parse_mode='HTML')


@dp.message_handler()
async def mailing_weather():
    for x in users_weather:
        if x['mailing']:
            result_str = f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã\n\n{weather.get_forecast(x["city"])}'
            await bot.send_message(x['id'], result_str, parse_mode='HTML')


async def scheduler():
    try:
        aioschedule.every().day.at("0:50").do(mailing_timetable)
        aioschedule.every().day.at("3:30").do(mailing_weather)
        while True:
            await aioschedule.run_pending()
            await asyncio.sleep(1)
    except Exception as e:
        print(e)
        pass


async def on_startup(dp):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
